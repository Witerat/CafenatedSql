package net.witerat.cafenatedsql.spi.mock;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * @author John Hutcheson &lt;witerat.test@gmail.com&gt;
 *
 */
public class MockStatement implements Statement {
  final Connection connection;
  private int resultSetType;
  private int resultSetConcurrency;
  private int resultSetHoldability;
  /**
   * Instantiate a(n) MockStatement object.
   * @param connection0
   */
  public MockStatement(final Connection connection0) {
    this.connection = connection0;
    resultSetType = ResultSet.TYPE_FORWARD_ONLY;
    resultSetConcurrency = ResultSet.CONCUR_READ_ONLY;
    resultSetHoldability = ResultSet.CLOSE_CURSORS_AT_COMMIT;
  }
  
  public MockStatement(final Connection connection0, final int resultSetType0,
      final int resultSetConcurrency0, final int resultSetHoldability0) {
    this.connection = connection0;
    resultSetType = resultSetType0;
    resultSetConcurrency = resultSetConcurrency0;
    resultSetHoldability = resultSetHoldability0;
  }
  
  @Override
  public void addBatch(String sql) throws SQLException {
    // No-op

  }

  @Override
  public void cancel() throws SQLException {
    // No-op

  }

  @Override
  public void clearBatch() throws SQLException {
    // No-op

  }

  @Override
  public void clearWarnings() throws SQLException {
    // No-op

  }

  @Override
  public void close() throws SQLException {
    // No-op

  }

  @Override
  public void closeOnCompletion() throws SQLException {
    // No-op

  }

  @Override
  public boolean execute(String sql) throws SQLException {
    // No-op
    return false;
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    // No-op
    return false;
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    // No-op
    return false;
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    // No-op
    return false;
  }

  @Override
  public int[] executeBatch() throws SQLException {
    // No-op
    return null;
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    // No-op
    return null;
  }

  @Override
  public int executeUpdate(String sql) throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public Connection getConnection() throws SQLException {
    // No-op
    return null;
  }

  @Override
  public int getFetchDirection() throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public int getFetchSize() throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    // No-op
    return null;
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public int getMaxRows() throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    // No-op
    return false;
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException {
    // No-op
    return false;
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    // No-op
    return null;
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    return resultSetConcurrency;
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return resultSetHoldability;
  }

  @Override
  public int getResultSetType() throws SQLException {
    return resultSetType;
  }

  @Override
  public int getUpdateCount() throws SQLException {
    // No-op
    return 0;
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    // No-op
    return null;
  }

  @Override
  public boolean isClosed() throws SQLException {
    // No-op
    return false;
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    // No-op
    return false;
  }

  @Override
  public boolean isPoolable() throws SQLException {
    // No-op
    return false;
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    // No-op
    return false;
  }

  @Override
  public void setCursorName(String name) throws SQLException {
    // No-op

  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    // No-op

  }

  @Override
  public void setFetchDirection(int direction) throws SQLException {
    // No-op

  }

  @Override
  public void setFetchSize(int rows) throws SQLException {
    // No-op

  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    // No-op

  }

  @Override
  public void setMaxRows(int max) throws SQLException {
    // No-op

  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    // No-op

  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    // No-op

  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    // No-op
    return null;
  }

}
